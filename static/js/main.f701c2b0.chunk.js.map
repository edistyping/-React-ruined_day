{"version":3,"sources":["fire.js","App.js","registerServiceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","state","counter","reasons","reason_provided","isHovering","optionText","bind","hoverButton","database","ref","orderByKey","limitToLast","on","snapshot","response","reason","val","opinion","id","key","row_num","setState","concat","e","preventDefault","inputValue","this","inputEl","value","push","response_time","ServerValue","TIMESTAMP","answer","prevState","btnClass","onSubmit","addResponse","spy","type","className","onMouseEnter","onMouseLeave","el","onClick","class","map","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f701c2b0.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDLfXpW9_-D3WMu1rzXubG_MghIn6utyWE\",\r\n  authDomain: \"ruined-day.firebaseapp.com\",\r\n  databaseURL: \"https://ruined-day.firebaseio.com\",\r\n  projectId: \"ruined-day\",\r\n  storageBucket: \"ruined-day.appspot.com\",\r\n  messagingSenderId: \"932131879177\",\r\n  appId: \"1:932131879177:web:4775ffb216765c6018bbd8\",\r\n  measurementId: \"G-JGYBPXV9GR\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(config);\r\n\r\nexport default fire;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport Fade from 'react-reveal/Fade';\r\nimport Pulse from 'react-reveal/Pulse'\r\n\r\n\r\nimport fire from \"./fire\";\r\nimport firebase from 'firebase';\r\n\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0, reasons: [], reason_provided: 0, isHovering: false};\r\n\r\n    this.optionText = this.optionText.bind(this); // testing phase\r\n    this.hoverButton = this.hoverButton.bind(this); // working phase\r\n  }\r\n    \r\n  componentWillMount(){\r\n\r\n    // This links Database response to UI\r\n    let responseRef = fire.database().ref('user_response').orderByKey().limitToLast(5);\r\n    responseRef.on('child_added', snapshot => {\r\n      let response = { reason: snapshot.val().opinion, id: snapshot.key, row_num: snapshot.val().id };   \r\n      this.setState({ reasons: [response].concat(this.state.reasons), counter: (snapshot.val().id + 1) });\r\n    })\r\n    // Next, check if there are more than 100 posts. If so, delete the oldest. \r\n  }\r\n  \r\n  addResponse(e){\r\n    e.preventDefault();\r\n\r\n    // Fetch the data in the input textbox and load it the database with the inserted_time\r\n    var inputValue = this.inputEl.value;\r\n    fire.database().ref('user_response').push( {opinion: inputValue, response_time: firebase.database.ServerValue.TIMESTAMP, answer: 1, id: this.state.counter});\r\n    \r\n    // Reset the input textbox  \r\n    this.inputEl.value = \"\"; \r\n   \r\n  }\r\n\r\n  // Bind this function to the textbox. \r\n  optionText(e){\r\n    e.preventDefault();\r\n    /*\r\n    var inputValue = this.inputEl.value;\r\n    console.log(\"Wtf yo: \" + inputValue);\r\n    // If the textbox is active/selected AND it's set to Default, then blank it\r\n    if (inputValue == \"(Optional) Please Share What Caused Your Ordeal!\"){\r\n      this.inputEl.value = \"\";\r\n    } \r\n    else if(inputValue == \"\" || inputValue == null){\r\n      this.inputEl.value = \"(Optional) Please Share What Caused Your Ordeal!\";\r\n    }   \r\n    */\r\n  }\r\n\r\n  // Everytime an user hovers over the button, it does 'Pulse' animation.\r\n  hoverButton(){\r\n      //e.preventDefault();\r\n      this.setState(prevState  => ({\r\n        isHovering: !prevState.isHovering\r\n      }));\r\n  }\r\n\r\n\r\n  render() {\r\n    const btnClass = this.state.isHovering ? \"pulse animated\" : \"\"; // we don't need this since 'spy' \r\n\r\n    return (\r\n    \r\n      <form onSubmit={this.addResponse.bind(this)}>\r\n        <Fade>    \r\n        <h1>Is your Day Ruined?</h1>\r\n        </Fade>\r\n        \r\n        <Pulse spy={this.state.isHovering} >   \r\n          <input type=\"submit\" className={btnClass}  value=\"Yes, it is\" onMouseEnter={this.hoverButton} onMouseLeave={this.hoverButton} />\r\n        </Pulse>\r\n        <input type=\"text\" ref={ el => this.inputEl = el } onClick={this.optionText}/>\r\n        \r\n        <div class=\"test0\">\r\n          <p>Number of ruined people today and their reasons below: {this.state.counter}</p>        \r\n          <ul>\r\n          {\r\n            this.state.reasons.map( response => <li key={response.id}>{response.reason}</li> )\r\n          }\r\n          </ul>\r\n        </div>\r\n      </form>\r\n\r\n\r\n  );}\r\n \r\n}\r\n\r\nexport default App;\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n    \n);\n\nregisterServiceWorker();\n\n"],"sourceRoot":""}